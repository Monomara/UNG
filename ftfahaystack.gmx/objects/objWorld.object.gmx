<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//make sure we never have more than one world object

if (instance_number(object_index) &gt; 1){
    instance_destroy();
}



//------Particle System------
//run this code at the beginning of your game
//for example, in the world object's create event
global.psys = part_system_create();
part_system_depth(global.psys,-100); //Change the 100 to the depth that you want for your particles


//------Particle Type------
//run this code at the beginning of your game
//for example, in the world object's create event
global.returnPart = part_type_create();
part_type_shape(global.returnPart,pt_shape_smoke);
part_type_color1(global.returnPart,16777215);
part_type_alpha3(global.returnPart,0.4064,0.8090,0.0000);
part_type_life(global.returnPart,200.0000,400.0000);
part_type_size(global.returnPart,0.3000,0.7000,-0.0005,0.0140);
part_type_speed(global.returnPart,2.2955,3.1646,0.0,0.2016);
part_type_direction(global.returnPart,170.0000,190.0000,0.0000,0.0000);
part_type_orientation(global.returnPart,0.0000,360.0000,3.1549,1.8741,0);
part_type_gravity(global.returnPart,0.0000,270.0000);
part_type_blend(global.returnPart,false);

//------Particle Type------
//run this code at the beginning of your game
//for example, in the world object's create event
global.explosionpart = part_type_create();
part_type_shape(global.explosionpart,pt_shape_square);
part_type_color_rgb(global.explosionpart,255,255,83,255,165,0);
part_type_alpha3(global.explosionpart,0.3189,0.8847,0.0000);
part_type_life(global.explosionpart,15.0000,25.0000);
part_type_size(global.explosionpart,0.0750,0.1500,0.0100,0.0230);
part_type_speed(global.explosionpart,1.500,3.75,0.01,0.0777);
part_type_direction(global.explosionpart,0.0000,360.0000,0.0000,0.8181);
part_type_orientation(global.explosionpart,0.0000,360.0000,-0.8774,-2.6925,0);
part_type_gravity(global.explosionpart,0.0000,270.0000);
part_type_blend(global.explosionpart,false);
    
    
//------Particle System------
//run this code at the beginning of your game
//for example, in the world object's create event
global.psys = part_system_create();
part_system_depth(global.psys,2000); //Change the 100 to the depth that you want for your particles


//------Particle Type------
//run this code at the beginning of your game
//for example, in the world object's create event
global.pixelSnow = part_type_create();
part_type_shape(global.pixelSnow,pt_shape_square);
part_type_color1(global.pixelSnow,16777215);
part_type_alpha1(global.pixelSnow,1.0000);
part_type_life(global.pixelSnow,200.0000,260.0000);
part_type_size(global.pixelSnow,0.0750,0.1500,0.0000,-0.0106);
part_type_speed(global.pixelSnow,2.0000,3.0000,-0.0236,0.0635);
part_type_direction(global.pixelSnow,120.0000,240.0000,0.0000,0.0000);
part_type_orientation(global.pixelSnow,0.0000,360.0000,-0.5704,0.6889,0);
part_type_gravity(global.pixelSnow,0.1000,250.0000);
part_type_blend(global.pixelSnow,false);    
    


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///return to previous window position/size (after using display_reset)

if (!window_get_fullscreen())
{
    window_set_position(global.windowXPrev,global.windowYPrev);
    window_set_size(global.windowWidthPrev,global.windowHeightPrev);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///pause current music when it's done fading out

audio_pause_sound(global.currentMusic);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug keys

if (global.debugMode &amp;&amp; global.gameStarted &amp;&amp; !global.gamePaused)
{
    if (keyboard_check(vk_tab))             //drags player with mouse
    {
        with (objPlayer)
        {
            x = mouse_x;
            y = mouse_y;
        }
    }
    if keyboard_check_pressed(vk_backspace)   //toggles debug overlay
    {
        global.debugOverlay = !global.debugOverlay;
    }
    if keyboard_check_pressed(vk_insert)  //saves game
    {
        with (objPlayer)
        {
            scrSaveGame(true);
            audio_play_sound(sndItem,0,false);
        }
    }
    if keyboard_check_pressed(vk_delete)  //toggles showing the hitbox
    {
        global.debugShowHitbox = !global.debugShowHitbox;
    }
    if keyboard_check_pressed(vk_home)    //toggles god mode
    {
        global.debugNoDeath = !global.debugNoDeath;
    }
    if keyboard_check_pressed(vk_end)     //toggles infinite jump
    {
        global.debugInfJump = !global.debugInfJump;
    }
    
    if keyboard_check_pressed(ord("1"))     //toggles dotkid
    {
        if (!global.lineKid)
        {
            global.dotKid = !global.dotKid;
            scrGetPlayerSprite();
            audio_play_sound(sndModeSwitch, 1, false);
        }
    }
    if (keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord("2")))     //toggles linekid
    {
        if (!global.dotKid &amp;&amp; !global.lunarKid)
        {
            global.lineKid = !global.lineKid;
            scrGetPlayerSprite();
            audio_play_sound(sndModeSwitch, 1, false);
        }
    }
    if (keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord("3")))     //toggles lunarkid
    {
        if (!global.lineKid)
        {
            global.lunarKid = !global.lunarKid;
            if (global.lunarKid)  
                with (objPlayer) { gravity = 0; }
                
            scrGetPlayerSprite();
            audio_play_sound(sndModeSwitch, 1, false);
        }
    }
    
    if (global.lineKid || global.lunarKid)
    {
        if ((keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord("A"))))
        {
            with (objPlayer)
            {
                image_angle = get_integer("Current angle: " + string(image_angle), image_angle);
            } 
        }
    }

    if (keyboard_check_pressed(vk_pageup) &amp;&amp; room != room_last)  //goes to next room
    {        
        with (objPlayer)
            instance_destroy();
    
        room_goto_next();
    }
    if (keyboard_check_pressed(vk_pagedown) &amp;&amp; room != room_first)    //goes to previous room
    {        
        with (objPlayer)
            instance_destroy();
    
        room_goto_previous();
    }
}

if (global.debugVisuals)
{
    with (objPlayer)    //sets appearance of the player to show god mode/infinite jump
    {
        if (global.debugNoDeath)     //makes player slightly transparent when god mode is on
            bow = true;
        else
            bow = false;
        
        if (global.debugInfJump)     //makes player turn blue when infinite jump is on
            image_blend = c_blue;
        else
            image_blend = c_white;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///function keys

if (keyboard_check_pressed(vk_escape))
{
    game_end();
}

if (keyboard_check_pressed(vk_f2))
{
    scrRestartGame();
    exit;
}

if (keyboard_check_pressed(vk_f4) &amp;&amp; !global.gamePaused)    //toggle fullscreen mode
{
    global.fullscreenMode = !global.fullscreenMode;
    
    window_set_fullscreen(global.fullscreenMode);
    
    scrSaveConfig();    //save fullscreen setting
}

if (keyboard_check_pressed(vk_f5) &amp;&amp; !global.gamePaused)    //reset window size
{
    scrResetWindowSize();
}

if (keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord("M")) &amp;&amp; !global.gamePaused)
{
    //toggle mute music setting
    scrToggleMusic();
    
    scrSaveConfig();    //save mute setting
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>objWorld</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///game checks


//set linear interpolation depending on what the current smoothing setting is
texture_set_interpolation(global.smoothingMode);

//controller checks
if (global.controllerEnabled &amp;&amp; global.controllerIndex != -1)
{
    if (!global.controllerMode)  //check if we should switch to controller mode
    {
        if (keyboard_check_pressed(vk_anykey))
        {
            global.controllerDelay = -1;
        }
        else if (scrAnyControllerButton() != -1)
        {
            if (global.controllerDelay == -1)
                global.controllerDelay = global.controllerDelayLength;
        }
    }
    else    //check if we should switch to keyboard mode
    {
        if (keyboard_check_pressed(vk_anykey))
        {
            if (global.controllerDelay == -1)
                global.controllerDelay = global.controllerDelayLength;
        }
        else if (scrAnyControllerButton() != -1)
        {
            global.controllerDelay = -1;
        }
    }
    
    if (global.controllerDelay != -1)   //check delay for switching between keyboard/controller
    {
        if (global.controllerDelay == 0)    //delay over, toggle controller mode
        {
            global.controllerMode = !global.controllerMode;
            global.controllerDelay = -1;
        }
        else
        {
            global.controllerDelay -= 1;
        }
    }
}

if (global.gameStarted)
{
    //handle pausing
    if (global.pauseDelay &lt;= 0) //check if pause delay is active
    {
        if (scrButtonCheckPressed(global.pauseButton))
        {
            if (!global.gamePaused)  //game currently not paused, pause the game
            {
                if (!global.noPause)
                {
                    global.gamePaused = true;  //set the game to paused
                    global.pauseDelay = global.pauseDelayLength; //set pause delay
                    
                    instance_deactivate_all(true);  //deactivate everything
                    
                    global.pauseSurf = surface_create(surface_get_width(application_surface),surface_get_height(application_surface));    //create new surface
                    surface_copy(global.pauseSurf,0,0,application_surface);             //copy current screen to it
                }
            }
            else    //game currently paused, unpause the game
            {
                global.gamePaused = false;  //set the game to unpaused
                global.pauseDelay = global.pauseDelayLength;     //set pause delay
                
                instance_activate_all();    //reactivate objects
                
                if (surface_exists(global.pauseSurf))
                    surface_free(global.pauseSurf);         //free the surface
                
                scrSaveConfig();    //save config in case volume levels were changed
                
                io_clear(); //clear input states to prevent possible pause strats/exploits
            }
        }
    }
    else
    {
        global.pauseDelay -= 1;
    }
    
    if (!global.gamePaused) //check if the game is currently paused
    {
        if (scrButtonCheckPressed(global.restartButton))
        {
            if (!global.noRestart)
            {
                //stop death sound/music
                audio_stop_sound(global.deathSound);
                audio_stop_sound(global.gameOverMusic);
                
                //resume room music
                audio_resume_sound(global.currentMusic);
                
                ///return to old gain if music is being faded out
                if (global.musicFading)
                {
                    global.musicFading = false;
                    audio_sound_gain(global.currentMusic,global.currentGain,0);
                    alarm[0] = -1;   //reset alarm that pauses music
                }
                
                scrSaveGame(false); //save death/time
                scrLoadGame(false); //load the game
            }
        }
        
        if (global.timeWhenDead || instance_exists(objPlayer))  //increment timer
        {
            global.timeMicro += delta_time;
            global.time += global.timeMicro div 1000000;
            global.timeMicro = global.timeMicro mod 1000000;
        }
    }
    else    //game is paused, check for volume controls
    {
        if (scrButtonCheck(global.upButton))
        {
            if (global.volumeLevel &lt; 100)
                global.volumeLevel += 1;
        }
        else if (scrButtonCheck(global.downButton))
        {
            if (global.volumeLevel &gt; 0)
                global.volumeLevel -= 1;
        }
        
        audio_master_gain(global.volumeLevel/100);  //set master gain
    }
    
    scrSetRoomCaption();    //keep caption updated
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fade current music out
global.musicFading = true;
global.currentGain = audio_sound_get_gain(global.currentMusic);     //get current gain
audio_sound_gain(global.currentMusic,0,1000);                       //fade out music over 1 second

alarm[0] = 50;  //pause music when it's done fading
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///room checks

if (!instance_exists(objPlayMusic))  //make sure the play music object isn't in the current room
    scrGetMusic();  //find and play the proper music for the current room

room_speed = 50;    //make sure game is running at the correct frame rate
scrSetRoomCaption();    //make sure window caption stays updated
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize everything

//initialize all variables
scrInitializeGlobals();

//load the current config file, sets default config if it doesn't exist
scrLoadConfig();

room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw pause screen

if (global.gamePaused)  //check if game is paused to draw the pause screen
{
    draw_clear(c_black);
    
    if (surface_exists(global.pauseSurf))       //check if surface exists before drawing it
        draw_surface(global.pauseSurf,0,0);
    
    draw_set_color(c_black);
    draw_set_alpha(0.4);
    
    draw_rectangle(-1,-1,display_get_gui_width(),display_get_gui_height(),0);    //darken the paused screen
    
    draw_set_alpha(1);
    
    draw_set_color(c_white);
    
    draw_set_halign(fa_center);
    draw_set_font(fDefault30);
    
    draw_text(display_get_gui_width()/2,display_get_gui_height()/2 - 24,"PAUSE");
    
    draw_set_halign(fa_left);
    draw_set_font(fDefault18);
    
    var t = global.time;
    var timeText = string(t div 3600) + ":";
    t = t mod 3600;
    timeText += string(t div 600);
    t = t mod 600;
    timeText += string(t div 60) + ":";
    t = t mod 60;
    timeText += string(t div 10);
    t = t mod 10;
    timeText += string(floor(t));
    
    draw_text(20,516,"Volume: " + string(global.volumeLevel) + "%");
    draw_text(20,541,"Deaths: " + string(global.death));
    draw_text(20,566,"Time: " + timeText);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw debug mode text when we're on the title screen

if (global.debugMode &amp;&amp; room == rTitle)
{
    draw_set_color(c_red);
    draw_set_font(fDefault12);
    draw_set_halign(fa_left);
    
    draw_text(34,34,"Debug mode");
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw debug overlay

if (global.debugOverlay)
{
    draw_set_color(c_white);
    draw_set_halign(fa_left);
    draw_set_font(fDefault12);
    
    var drawX = 0, drawY = 0, drawAlign = 0, drawAngle = 0;
    if (instance_exists(objPlayer))
    {
        drawX = objPlayer.x;
        drawY = objPlayer.y;
        
        if (!global.Xgrav) 
            drawAlign = objPlayer.x mod 3;
        else
            drawAlign = objPlayer.y mod 3;
            
        drawAngle = objPlayer.image_angle;
    }
    
    scrDrawTextOutline(20,20,"X: "+string(drawX),c_white,c_black);
    scrDrawTextOutline(20,40,"Y: "+string(drawY),c_white,c_black);
    scrDrawTextOutline(20,60,"Align: "+string(drawAlign),c_white,c_black);
    scrDrawTextOutline(20,80,"Angle: "+string(drawAngle),c_white,c_black);
    scrDrawTextOutline(20,100,"Gravity: "+string(global.grav),c_white,c_black); 
    scrDrawTextOutline(20,120,"X-Gravity: "+string(global.Xgrav),c_white,c_black); 
    scrDrawTextOutline(20,140,"Room Name: "+room_get_name(room),c_white,c_black);
    scrDrawTextOutline(20,160,"Room Number: "+string(room),c_white,c_black);
    scrDrawTextOutline(20,180,"God Mode: "+string(global.debugNoDeath),c_white,c_black);
    scrDrawTextOutline(20,200,"Infinite Jump: "+string(global.debugInfJump),c_white,c_black);
    
    draw_set_halign(fa_right);
    scrDrawTextOutline(780,20,"FPS: "+string(fps),c_white,c_black);
    scrDrawTextOutline(780,40,"Real FPS: "+string(fps_real),c_white,c_black);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
