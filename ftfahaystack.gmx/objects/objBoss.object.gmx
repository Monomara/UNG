<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCidle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed=.5

t=0
iframes=0
hp=20

ground=y
gravity=0
vspeed=0
grounded=false
lift=false

state='idle'

deadly=true

animTimer=0
idleTimer=0
playerTrack=0
dashSpd=0



//wave attack vars
wavespd=8

cooldown=50
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///boss death
global.gameClear = true;
scrSaveGame(true);
aa=instance_create(objPlayer.x,objPlayer.y,objCasioWarp);
aa.image_alpha=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///take damage, manage iframes, t++, and death
iframes--;
t++;
if hp&gt;0 &amp;&amp; place_meeting(x,y,objPlayer){scrKillPlayer();}//prevent falling on him after win

if iframes&gt;0{ //iframe red flashes
    if t mod 8&lt;=3 {//switches every 4 frames
        image_blend=$0000FF;
    }
    else{
        image_blend=$FFFFFF;
    }
}
else{image_blend=$FFFFFF;}//make sure boss doesnt stay red when iframes expire


if place_meeting(x,y,objBullet) &amp;&amp; iframes&lt;=0 &amp;&amp; hp&gt;0 &amp;&amp; state!='reflect' &amp;&amp; deadly=true{ //take damage
    audio_play_sound(sndBossHit,0,0);
    hp--;
    iframes=100;
}
if place_meeting(x,y,objBullet){
    if state='reflect'{
        instance_create(instance_nearest(x,y,objBullet).x,instance_nearest(x,y,objBullet).y,objCreflectB)
    }
    with instance_nearest(x,y,objBullet){
        instance_destroy()
    }
    
} //delete bullet on every collision

if hp&lt;=0 &amp;&amp; instance_exists(objPlayer){ //death transition to credits
    audio_sound_gain(mus365UNITEDSTARS,0,1000);
    iframes=-1;
    sprite_index=sprCdefeat;
    state='dead'
    global.gameClear = true;
    global.bossItem[11] = true;
    objPlayer.maxspeed=0;
    if objPlayer.notOnBlock=false{
        objPlayer.frozen=true;
    }
    if alarm[0]=-1{ //prevent alarm being set every frame
        alarm[0]=50;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///kill player on contact
/*
if sprite_index!=sprCfade{
    deadly=true;
}
else{deadly=false;}
*/

if place_meeting(x,y,objPlayer) &amp;&amp; deadly=true{
    scrKillPlayer();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///attack phases

if state='idle' { //choose next action
    animTimer=0
    if idleTimer=0{
        if instance_exists(objPlayer){
            if objPlayer.x&gt;x{image_xscale=-1}
            else{image_xscale=1}
        }
    }
    sprite_index=sprCidle
    deadly=true
    idleTimer++
    if idleTimer=30{
        if hp=20{
             state=choose('wave','fade','groundcrush','runslash') //no reflect on max hp
        }
        else{
            state=choose('wave','reflect','fade','groundcrush','runslash') //the normal idle state options
        }
        if state='groundcrush' &amp;&amp; cooldown&gt;0{state=choose('wave','fade','runslash')}//prevent groundcrush while on cooldown
        idleTimer=0
    }
}

if state='reflect'{     //reflect bullets
    image_speed=0
    if sprite_index!=sprCreflect{
        sprite_index=sprCreflect
        animTimer=0
        if instance_exists(objPlayer){
            if objPlayer.x&gt;x{image_xscale=-1}
            else{image_xscale=1}
        }
    }
    animTimer++
    if animTimer=40{state='fade'}
}

if state='wave'{    //waveslashes
    if animTimer==0{  //start with down slash anim and find direction
        sprite_index=sprCdownslash
        if instance_exists(objPlayer){
            if objPlayer.x&gt;x{image_xscale=-1}
            else{image_xscale=1}
        }
    }
    
    animTimer++//used to control timing of everything
    
    if image_index=4{image_speed=0;}
    else{image_speed=.5;}
    if animTimer=4{
        if instance_exists(objPlayer){
            audio_play_sound(sndHu,0,0)
            if image_xscale=1{
                aa=instance_create(x-32,y,objCherry)
                aa.sprite_index=sprCwave
                aa.image_speed=.5
                aa.speed=wavespd
                aa.direction=180
            }
            else{
                aa=instance_create(x+32,y,objCherry)
                aa.sprite_index=sprCwave
                aa.image_speed=.5
                aa.speed=wavespd
                aa.direction=0
                aa.image_xscale=-1
            }
        }
    }
    if animTimer=16{
        image_index=0
        sprite_index=sprCupslash
    }
    if animTimer=20{
        if instance_exists(objPlayer){
            audio_play_sound(sndHu,0,0)
            if image_xscale=1{
                aa=instance_create(x-32,y+32,objCherry)
                aa.sprite_index=sprCwave
                aa.image_speed=.5
                aa.speed=wavespd
                aa.direction=180
            }
            else{
                aa=instance_create(x+32,y+32,objCherry)
                aa.sprite_index=sprCwave
                aa.image_speed=.5
                aa.speed=wavespd
                aa.direction=0
                aa.image_xscale=-1
            }
        }
    }
    if animTimer=32{
        image_index=0
        sprite_index=sprCdownslash
    }
    if animTimer=36{
        if instance_exists(objPlayer){
            audio_play_sound(sndHu,0,0)
            if image_xscale=1{
                aa=instance_create(x-32,y,objCherry)
                aa.sprite_index=sprCwave
                aa.image_speed=.5
                aa.speed=wavespd
                aa.direction=180
            }
            else{
                aa=instance_create(x+32,y,objCherry)
                aa.sprite_index=sprCwave
                aa.image_speed=.5
                aa.speed=wavespd
                aa.direction=0
                aa.image_xscale=-1
            }
        }
    }
    if animTimer=48{
        image_index=0
        sprite_index=sprCupslash
    }
    if animTimer=52{
        if instance_exists(objPlayer){
            audio_play_sound(sndHu,0,0)
            if image_xscale=1{
                aa=instance_create(x-32,y+32,objCherry)
                aa.sprite_index=sprCwave
                aa.image_speed=.5
                aa.speed=wavespd
                aa.direction=180
            }
            else{
                aa=instance_create(x+32,y+32,objCherry)
                aa.sprite_index=sprCwave
                aa.image_speed=.5
                aa.speed=wavespd
                aa.direction=0
                aa.image_xscale=-1
            }
        }
    }
    if animTimer=70{
        state=choose('reflect','runslash')
        animTimer=0
    }
}

if state='fade'{        //teleport
    if deadly=true{
        deadly=false
        animTimer=0
        sprite_index=sprCfade
        image_speed=.5
        image_index=0
    }
    animTimer++
    if image_index=4{
        image_speed=0
        if instance_exists(objPlayer){
            if x&gt;=objPlayer.x{
                playerTrack=objPlayer.x-68 //always "overshoots" the player to compensate how early he grabs objPlayer.x
            }
            else{
                playerTrack=objPlayer.x+68
            }
        }
    }
    if animTimer=28{
        if choose(0,1)=0{
            if playerTrack&gt;400{
                x=playerTrack-300
            }
            else{
                x=playerTrack+300
            }
            animTimer=0
            deadly=true
            state='idle'
        }
        else{
            x=playerTrack
            deadly=true
            state='slash1'
            animTimer=0
        }
    }
}

if state='slash1'{      //teleport slash
    if animTimer=0{
        if instance_exists(objPlayer){
            if objPlayer.x&gt;x{image_xscale=-1}
            else{image_xscale=1}
            }
        image_speed=.5
        image_index=0
        sprite_index=sprCdownslash
        audio_play_sound(sndOriyah,0,0)
    }
    
    if image_index=4{
        image_speed=0
    }
    animTimer++
    if animTimer=40{
        state=choose('wave','reflect','fade','groundcrush','runslash')
        if state='wave'{animTimer=20}
        else{animTimer=0}
        
    }
}

if state='groundcrush'{     //ground crush
    if lift=false{
        if instance_exists(objPlayer){
            if objPlayer.x&gt;x{image_xscale=-1}
            else{image_xscale=1}
            }
        sprite_index=sprCjump
        image_speed=0
        gravity=.4
        vspeed=-5
        audio_play_sound(sndGroundCrush,0,0)
        lift=true
    }
    if y&gt;ground{
        gravity=0
        vspeed=0
        y=ground
        grounded=true
    }
    if grounded=true{
        sprite_index=sprCdownslash
        image_speed=.5
        if image_index=4{
            image_speed=0
            if animTimer=0{
                if image_xscale=1{ //left
                    cw=instance_create(x-32,512,objCcrushwave)
                    cw.left=1
                }
                else{ //right
                    cw=instance_create(x+32,512,objCcrushwave)
                    cw.left=0
                }
                animTimer++
            }
            animTimer++
            if animTimer=20{
                lift=false
                grounded=false
                state='idle'
                cooldown=100
            }
        }
        
    }
}
if state='runslash'{      //charge at player then slash
    if animTimer=0{
        if instance_exists(objPlayer){
            if objPlayer.x&gt;x{
                image_xscale=-1
            }
            else{
                image_xscale=1
            }
            playerTrack=objPlayer.x
            if x&gt;playerTrack{dashSpd=-6}
            if x&lt;playerTrack{dashSpd=6}
        }
        audio_play_sound(sndYaah,0,0)
        sprite_index=sprCfade
        image_index=0
        image_speed=0
        animTimer++
    }
    if dashSpd!=0{
        if t mod 4=0{
            instance_create(x,y,objBossTrail)
        }
    }
    if dashSpd=-6 &amp;&amp; x&gt;playerTrack{x+=dashSpd}
    else if dashSpd=6 &amp;&amp; x&lt;playerTrack{x+=dashSpd}
    else{
        dashSpd=0
        if animTimer=1{
        sprite_index=sprCupslash
        image_speed=.5
        audio_play_sound(sndOriyah,0,0)
        }
        if image_index=4{
            image_speed=0
        }
        if animTimer=20{
            state=choose('wave','reflect','fade')
            if state='wave'{animTimer=20}
            else{animTimer=0}
        }
        animTimer++
    }
}

cooldown-- //used to prevent energy breaker and ground crush spam
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
