<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-30</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize the primary player variables
frozen = false; //sets if the player can move or not

constJump = (8.5 * sign(global.grav)); //set how fast the player jumps
constJump2 = (7 * sign(global.grav)); //sets how fast the player double jumps

jump = (8.5 * sign(global.grav)); //set how fast the player jumps
jump2 = (7 * sign(global.grav)); //sets how fast the player double jumps
gravity = (0.4 * global.grav); //player gravity
friction = 0; //player friction

djump = 1; //allow the player to double jump as soon as he spawns
maxSpeed = 3; //max horizontal speed
maxVspeed = (9 * (abs(global.grav) + ((1 - abs(global.grav)) / 2))); //max vertical speed
image_speed = 0.2; //initial speed of animation
onPlatform = false; //sets if player is currently standing on a platform

xScale = 1; //sets the direction the player is facing (1 is facing right, -1 is facing left)
sit = false; //sets if player is currently sitting down
start = false; //sets if Lunar Kid is currently in motion

lowGrav = false;
highGrav = false;
lowSpeed = false;
highSpeed = false;

vineGrav = 0;
vineSpeed = 0;
lowGravVine = false;

count = 0;

bow = false;
hit = false;

scrGetPlayerSprite(); //set the player's hitbox

/*if (global.difficulty == 0 &amp;&amp; global.gameStarted)   //create the player's bow
    instance_create(x,y,objBow);*/
    
if (global.autosave) //save the game if currently set to autosave
{
    scrSaveGame(true);
    global.autosave = false;
}

    //objPlayer
    //CREATE
array_size = 10000;//the amount of positions to record
    for(var i = array_size-1; i &gt;= 0; i--)
    {
        pos_x[i] = x;
        pos_y[i] = y;
    }

    
    
//someday ill grow to be as tall as a giant
ts=0;
if room=rSomeday{
    //mask_index=sprSomeDayMask;
  
}
else{
    mask_index=sprPlayerMask;
}


//sleep dealer springs
spring=0
xlast=0
ylast=0


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//when the player is destroyed, also destroy the bow
with (objBow)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///make the player tangible again
image_alpha = 1;
hit = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((x &lt; 0 || x &gt; room_width || y &lt; 0 || y &gt; room_height) &amp;&amp; global.edgeDeath)  //check if player has left the room
{
    if (!global.debugNoDeath) { scrKillPlayer(); }
    else { scrGodPlayer(); }
}

//update player sprite
if (global.playerAnimationFix)
{
    if (!global.lunarKid)
    {
        //block/vine checks
        if (!global.Xgrav)
        {
            notOnBlock = (place_free(x,y+sign(global.grav)));
            var onVineR = (place_meeting(x+1,y,objWalljumpR) &amp;&amp; notOnBlock);
            var onVineL = (place_meeting(x-1,y,objWalljumpL) &amp;&amp; notOnBlock);
        }
        else
        {
            notOnBlock = (place_free(x+sign(global.grav),y));
            var onVineU = (place_meeting(x,y+1,objWalljumpU) &amp;&amp; notOnBlock);
            var onVineD = (place_meeting(x,y-1,objWalljumpD) &amp;&amp; notOnBlock);
        }
        
        if ((!global.Xgrav &amp;&amp; (!onVineR &amp;&amp; !onVineL)) || (global.Xgrav &amp;&amp; (!onVineU &amp;&amp; !onVineD)))   //not touching any vines
        {
            if (onPlatform || !notOnBlock)  //standing on something
            {
                //check if moving left/right
                var L = (scrButtonCheck(global.leftButton) || (global.directionalTapFix &amp;&amp; scrButtonCheckPressed(global.leftButton)));
                var R = (scrButtonCheck(global.rightButton) || (global.directionalTapFix &amp;&amp; scrButtonCheckPressed(global.rightButton)));
                
                if ((L || R) &amp;&amp; !frozen)
                {
                    sprite_index = pRunning;
                    image_speed = 1/2;
                }
                else if spring!=0{ // doesnt work :(
                    sprite_index = pRunning;
                    image_speed = 1/2;
                }
                else
                {
                    sprite_index = pIdle;
                    image_speed = 1/5;
                }
            }
            else    //in the air
            { 
                if ((vspeed * global.grav) &lt; 0)
                {
                    sprite_index = pJump;
                    image_speed = 1/2;
                }
                else
                {
                    sprite_index = pFall;
                    image_speed = 1/2;
                }
            }
        }
        else    //touching a vine
        {
            sprite_index = pSliding;
            image_speed = 1/2;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//check left/right button presses
var L, R, U, D, h, slipBlockTouching, slideBlockTouching, chairTouching, onVineL, onVineR, onVineU, onVineD;

xlast=x
ylast=y

scrGetPlayerSprite();

if room=rSomeday{
    maxSpeed=3*image_xscale; //player speed scales with sprite for someday room
}


if (!global.lunarKid)
{
    if (!sit)
    {
        L = (scrButtonCheck(global.leftButton) || (global.directionalTapFix &amp;&amp; scrButtonCheckPressed(global.leftButton)));
        R = (scrButtonCheck(global.rightButton) || (global.directionalTapFix &amp;&amp; scrButtonCheckPressed(global.rightButton)));
        
        //block checks
        if (!global.Xgrav)
        {
            slipBlockTouching = instance_place(x, (y + (1 * sign(global.grav))), objSlipBlock);
            chairTouching = instance_place(x, (y + (1 * sign(global.grav))), objBench); 
            notOnBlock = place_free(x, (y + sign(global.grav)));
        }
        else
        {
            slipBlockTouching = instance_place((x + (1 * sign(global.grav))), y, objSlipBlock);
            chairTouching = instance_place((x + (1 * sign(global.grav))), y, objBench);
            notOnBlock = place_free((x + sign(global.grav)), y);
        }
        
        //vine checks
        if (!global.lineKid)
        {
            if (!global.Xgrav)
            {
                onVineL = (place_meeting(x - 1, y,objWalljumpL) &amp;&amp; notOnBlock);
                onVineR = (place_meeting(x + 1, y,objWalljumpR) &amp;&amp; notOnBlock);
            }
            else
            {
                onVineD = (place_meeting(x, y - 1,objWalljumpD) &amp;&amp; notOnBlock);
                onVineU = (place_meeting(x, y + 1,objWalljumpU) &amp;&amp; notOnBlock);
            }
        }
        else
        {
            if (!global.Xgrav)
            {
                onVineL = (place_meeting(x - 2, y,objWalljumpL));
                onVineR = (place_meeting(x + 2, y,objWalljumpR));
            }
            else
            {
                onVineD = (place_meeting(x, y - 2,objWalljumpD));
                onVineU = (place_meeting(x, y + 2,objWalljumpU));
            }
        }
            
        h = 0;
        
        if (!frozen)    //don't move if frozen
        {
            if (R)
                h = 1;
            else if (L)
                h = -1;
        }
        
        if (h != 0)  //player is moving
        {
            if ((!global.Xgrav &amp;&amp; !onVineR &amp;&amp; !onVineL) || (global.Xgrav &amp;&amp; !onVineU &amp;&amp; !onVineD))   //make sure not currently touching a vine
            {
                if (!global.Xgrav) { xScale = h; }
                else { xScale = (h * sign(global.grav)); }
            }
            if (global.slippage != 0)   //player momentum, aka "CBT Ice"
            {
                if (!global.Xgrav)
                {
                    if ((abs(hspeed) &lt; maxSpeed) || (((hspeed == maxSpeed) &amp;&amp; (h == -1)) || ((hspeed == (-maxSpeed)) &amp;&amp; (h == 1))))
                        hspeed += (global.slippage * h);
                        
                    if (abs(hspeed) &gt;= maxSpeed) { hspeed = (maxSpeed * sign(hspeed)); }
                }
                else
                {
                    if ((abs(vspeed) &lt; maxSpeed) || (((vspeed == maxSpeed) &amp;&amp; ((h * (-sign(global.grav))) == -1)) || ((vspeed == (-maxSpeed)) &amp;&amp; ((h * (-sign(global.grav))) == 1))))
                        vspeed += ((global.slippage * h) * (sign(global.grav)));
                        
                    if (abs(vspeed) &gt;= maxSpeed) { vspeed = ((maxSpeed * sign(vspeed)) * (-sign(global.grav))); }
                }
            }

            else if (slipBlockTouching != noone) //not touching a slip block, move immediately at full speed
            {
                if (!global.Xgrav)
                {
                    if (((h == 1) &amp;&amp; (hspeed &lt; maxSpeed)) || ((h == -1) &amp;&amp; (hspeed &gt; (-maxSpeed))))
                        hspeed += (slipBlockTouching.slip * h);
                        
                    else if (sign(hspeed) == h) { hspeed = (maxSpeed * sign(hspeed)); }
                }
                else if (((h == 1) &amp;&amp; (vspeed &lt; maxSpeed)) || ((h == -1) &amp;&amp; (vspeed &gt; (-maxSpeed))))
                    vspeed += ((slipBlockTouching.slip * h) * (-sign(global.grav)));
                else if (sign(vspeed) == (h * (-sign(global.grav))))
                    vspeed = ((maxSpeed * sign(vspeed)) * (-sign(global.grav)));
            }
            else //touching a slip block, use acceleration
            {
                if (!global.Xgrav) { hspeed = (maxSpeed * h) }
                else { vspeed = ((maxSpeed * h) * (-sign(global.grav))); }
            }
            
            sprite_index = pRunning;
            image_speed = 0.5;
        }
        else    //player is not moving
        {
            if (global.slippage != 0)
            {
                if (!global.Xgrav)
                {
                    if (abs(hspeed) &gt; maxSpeed) { hspeed = (maxSpeed * sign(hspeed)); }
                    else if (hspeed &gt; 0)
                    {
                        hspeed -= (global.slippage / 2);
                        if (hspeed &lt;= 0) { hspeed = 0; }
                    }
                    else if (hspeed &lt; 0)
                    {
                        hspeed += (global.slippage / 2);
                        if (hspeed &gt;= 0) { hspeed = 0; }
                    }
                }
                else if (abs(vspeed) &gt; maxSpeed)
                    vspeed = ((maxSpeed * sign(hspeed)) * sign(global.grav));
                else if (vspeed &gt; 0)
                {
                    vspeed -= (global.slippage / 2);
                    if (vspeed &lt;= 0) { vspeed = 0; }
                }
                else if (vspeed &lt; 0)
                {
                    vspeed += (global.slippage / 2);
                    if (vspeed &gt;= 0) { vspeed = 0; }
                }
            }
            else if room=rSleepDealer &amp;&amp; true=false //not touching a slip block, stop immediately //whoever fucked up the comments here is a dipshit
            {
            slip = 0.2
                if (!global.Xgrav)
                {
                    if (hspeed &gt; 0)
                    {
                        hspeed -= slip;
                        if (hspeed &lt;= 0) { hspeed = 0; }
                    }
                    else if (hspeed &lt; 0)
                    {
                        hspeed += slip;
                        if (hspeed &gt;= 0) { hspeed = 0; }
                    }
                }
                else if (vspeed &gt; 0)
                {
                    vspeed -= slip;
                    if (vspeed &lt;= 0) { vspeed = 0; }
                }
                else if (vspeed &lt; 0)
                {
                    vspeed += slip;
                    if (vspeed &gt;= 0) { vspeed = 0; }
                }
            }
            else //touching a slip block, slow down
            {
                if (!global.Xgrav) { hspeed = 0; }
                else { vspeed = 0; }
            }
            
            sprite_index = pIdle;
            image_speed = 0.2;
        }
        
        if (!onPlatform)    //check if standing on a platform
        {
            if (!global.Xgrav)
            {
                if ((vspeed / global.grav) &lt; -0.05) { sprite_index = pJump; }
                else if ((vspeed / global.grav) &gt; 0.05) { sprite_index = pFall; }
            }
            else if ((hspeed / global.grav) &lt; -0.05) { sprite_index = pJump; }
            else if ((hspeed / global.grav) &gt; 0.05) { sprite_index = pFall; }
        }
        else if (!global.Xgrav)
        {
            if (!place_meeting(x, (y + (4 / global.grav)), objPlatform)) { onPlatform = 0; }
        }
        else if (!place_meeting((x + (4 / global.grav)), y, objPlatform)) { onPlatform = 0; }
        
        if (!global.Xgrav) { slideBlockTouching = instance_place(x, (y + sign(global.grav)), objSlideBlock); }
        else { slideBlockTouching = instance_place((x + sign(global.grav)), y, objSlideBlock); }
        
        if (slideBlockTouching != noone) //on a slide block, start moving with it
        {
            if (!global.Xgrav) { hspeed += slideBlockTouching.h; }
            else { vspeed += slideBlockTouching.h; }
        }
        
        if (!global.Xgrav)
        {
            if ((vspeed * sign(global.grav)) &gt; maxVspeed)
                vspeed = (sign(global.grav) * maxVspeed); //check if moving vertically faster than max speed
        }
        else if ((hspeed * sign(global.grav)) &gt; maxVspeed) //check if moving horizontally faster than max speed
            hspeed = (sign(global.grav) * maxVspeed);
        
        if (!frozen)    //check if frozen before doing anything
        {
            if (scrButtonCheckPressed(global.shootButton))
                scrPlayerShoot();
            if (global.dotKid)
            {
                if (keyboard_check_pressed(ord("X")))
                    dotRange = !dotRange;
            }
            if (scrButtonCheckPressed(global.jumpButton))
                scrPlayerJump();
            if (scrButtonCheckReleased(global.jumpButton))
                scrPlayerVJump();
            if (scrButtonCheckPressed(global.suicideButton)) &amp;&amp; room&gt;=rStageSelect &amp;&amp; (room&lt;=rFE_final || room&gt;=rFTFAlol){
                room_goto(rStageSelect);
                instance_destroy()
                }
        }
        
        if (global.adAlign &amp;&amp; ((place_meeting(x, (y + sign(global.grav)), objBlock) || place_meeting(x, (y + sign(global.grav)), objPlatform))))
        {
            if (!global.Xgrav)
            {
                if scrButtonCheckPressed(global.alignLeftButton) { hspeed -= 1; }
                if scrButtonCheckPressed(global.alignRightButton) { hspeed += 1; }
            }
            else
            {
                if scrButtonCheckPressed(global.alignLeftButton) { vspeed += (1 * sign(global.grav)); }
                if scrButtonCheckPressed(global.alignRightButton) { vspeed -= (1 * sign(global.grav)); }
            }
        }
        
        if (global.debugNoDeath)
        {
            if (bow &amp;&amp; !instance_exists(objBow)) { instance_create(x, y, objBow); }
            else if (!bow &amp;&amp; instance_exists(objBow)) { instance_destroy(objBow); }
        }
        else { if (instance_exists(objBow)) { instance_destroy(objBow); } }
        
        //gravity checks
        gravity = 0.4 * global.grav;
        if (!global.Xgrav) { gravity_direction = 270; }
        else { gravity_direction = 0; }
        
        if (place_meeting(x, y, objHighGravityField) || highGrav) 
        {
            gravity = 0.7 * global.grav;
        } 
        else if (place_meeting(x, y, objLowGravityField) || lowGrav || lowGravVine) 
        {
            gravity = 0.2 * global.grav;
        } 
        
        //speed checks
        if (!vineSpeed) 
        {
            maxSpeed = 3;
            
            if (place_meeting(x, y, objLowSpeedField) || lowSpeed) 
            { 
                maxSpeed = 1; 
            } 
            else if (place_meeting(x, y, objHighSpeedField) || highSpeed) 
            {
                maxSpeed = 6;
            }
        }
        
        //walljumps
        
        scrPlayerWallJump();
        
        //slopes
        
        if (instance_exists(objSlope) &amp;&amp; hspeed != 0)
        {
            var moveLimit = abs(hspeed);    //sets how high/low the player can go to snap onto a slope, this can be increased to make the player able to run over steeper slopes (ie setting it to abs(hspeed)*2 allows the player to run over slopes twice as steep)
            
            var slopeCheck;
            var hTest;
            
            var ySlope;
            
            //falling onto a slope
            if (place_meeting(x+hspeed,y+vspeed+gravity,objSlope) &amp;&amp; (vspeed+gravity)*global.grav &gt; 0 &amp;&amp; notOnBlock)
            {
                var xLast = x;
                var yLast = y;
                var hLast = hspeed;
                var vLast = vspeed;
                
                vspeed += gravity;
                
                x += hspeed;
                hspeed = 0;
                
                if(!place_free(x,y+vspeed))
                {
                    if (global.grav == 1)   //normal
                        move_contact_solid(270,abs(vspeed));
                    else    //flipped
                        move_contact_solid(90,abs(vspeed));
                    vspeed = 0;
                }
                
                y += vspeed;            
                
                if (!place_free(x,y+(global.grav)) &amp;&amp; place_free(x,y))  //snapped onto the slope properly
                {
                    djump = 1;
                    notOnBlock = false;
                }
                else    //did not snap onto the slope, return to previous position
                {
                    x = xLast;
                    y = yLast;
                    hspeed = hLast;
                    vspeed = vLast;
                }
            }
            
            //moving down a slope
            if (!notOnBlock)
            {
                var onSlope = (place_meeting(x,y+(global.grav),objSlope));    //treat normal blocks the same as slopes if we're standing on a slope
                
                slopeCheck = true;
                hTest = hspeed;
                
                while (slopeCheck)
                {
                    ySlope = 0;
                    //check how far we should move down
                    while ((!place_meeting(x+hTest,y-ySlope+(global.grav),objSlope) || (onSlope &amp;&amp; !place_meeting(x+hTest,y-ySlope+(global.grav),objBlock))) &amp;&amp; ySlope*global.grav &gt; -floor(moveLimit*(hTest/hspeed)))
                    {
                        ySlope -= global.grav;
                    }
                    
                    //check if we actually need to move down
                    if (place_meeting(x+hTest,y-ySlope+(global.grav),objSlope) || (onSlope &amp;&amp; place_meeting(x+hTest,y-ySlope+(global.grav),objBlock)))
                    {
                        if (ySlope != 0 &amp;&amp; !place_meeting(x+hTest,y-ySlope,objBlock))
                        {
                            y -= ySlope;
                            
                            x += hTest;
                            hspeed = 0;
                            
                            slopeCheck = false;
                        }
                        else
                        {
                            if (hTest &gt; 0)
                            {
                                hTest -= 1;
                                if (hTest &lt;= 0)
                                    slopeCheck = false;
                            }
                            else if (hTest &lt; 0)
                            {
                                hTest += 1;
                                if (hTest &gt;= 0)
                                    slopeCheck = false;
                            }
                            else
                            {
                                slopeCheck = false;
                            }
                        }
                    }
                    else
                    {
                        slopeCheck = false;
                    }
                }
            }
            
            //moving up a slope
            if (place_meeting(x+hspeed,y,objSlope))
            {
                slopeCheck = true;
                hTest = hspeed;
                
                while (slopeCheck)
                {
                    ySlope = 0;
                    
                    //check how far we have to move up
                    while (place_meeting(x+hTest,y-ySlope,objSlope) &amp;&amp; ySlope*global.grav &lt; floor(moveLimit*(hTest/hspeed)))
                    {
                        ySlope += global.grav;
                    }
                    
                    //check if we actually need to move up
                    if (place_free(x+hTest,y-ySlope))
                    {            
                        y -= ySlope;
                        
                        x += hTest;
                        hspeed = 0;
                        
                        slopeCheck = false;
                    }
                    else
                    {
                        if (hTest &gt; 0)
                        {
                            hTest -= 1;
                            if (hTest &lt;= 0)
                                slopeCheck = false;
                        }
                        else if (hTest &lt; 0)
                        {
                            hTest += 1;
                            if (hTest &gt;= 0)
                                slopeCheck = false;
                        }
                        else
                        {
                            slopeCheck = false;
                        }
                    }
                }
            }
            
            //set xprevious/yprevious coordinates for future solid collisions
            xprevious = x;
            yprevious = y;
        }
        
        //sitting
        if (chairTouching != noone)
        {
            if (place_free(x + hspeed, y) &amp;&amp; place_free(x - hspeed, y))
            {
                if (scrButtonCheckPressed(global.upButton))
                {
                    var inst = instance_place(x, y, objBench);
                    
                    //inst = instance_place(x, y, objBench);
                    if (inst != noone) 
                    {
                        if (vspeed = 0)
                        {
                            sit = true;
                            y = inst.yy;
                            
                            if (inst.xx != 0)
                            {
                                if (inst.image_xscale &gt; 0) { xScale = 1; }
                                else { xScale = -1; } x = inst.xx;
                            }
                        }
                    }
                }
            }
        }
    }
    else //player sitting down
    {
        if (scrButtonCheckPressed(global.jumpButton))
        {
            
            audio_play_sound(sndWallJump, 1, false);
            sit = false;
        }
        
        hspeed = 0; vspeed = 0; gravity = 0; 
        sprite_index = pSitting;
    }
}

if (frozen)
{
    {
        hspeed = 0; vspeed = 0;
        gravity = 0;
    }
}
//show_debug_message(maxVspeed)

//update record of positions
//shift records down by one position
for(var i = array_size-1; i &gt; 0; i--){
    pos_x[i] = pos_x[i-1];
    pos_y[i] = pos_y[i-1];
}
//record new position
pos_x[0] = x;
pos_y[0] = y;

//someday
if room=rSomeday{
    mask_index=sprSomeDayMask;
    image_xscale=-sin(ts)+1.5;
    image_yscale=image_xscale;
    ts+=.02;
    jump=constJump*image_xscale;
    jump2=constJump2*image_xscale;
   
    gravity=(.4*global.grav)*image_xscale;
}

if !place_meeting(x,y,objBench) &amp;&amp; !place_meeting(x-1,y,objWalljumpL) &amp;&amp; !place_meeting(x+1,y,objWalljumpR){ //nick's engine has caused so much pain
    //fun water :)
    if place_meeting(x,y,objFunWater){
        maxSpeed = -3;
        if L {xScale=1}
        if R {xScale=-1}
    }
    else{
        maxSpeed = 3;
        if L {xScale=-1}
        if R {xScale=1}
    
    }
    
    
    if (L &amp;&amp; spring&gt;0) or (R &amp;&amp; spring&lt;0){ //springs
        spring=0
    }
    if (L &amp;&amp; spring&lt;0) or (R &amp;&amp; spring&gt;0){ 
        hspeed=spring
    }
    if place_meeting (x+1,y,objBlock) &amp;&amp; spring&gt;0{
        spring=0
    }
    if place_meeting (x-1,y,objBlock) &amp;&amp; spring&lt;0{
        spring=0
    }
    
    if place_meeting(x,y,objSpringR){spring=9}
    if place_meeting(x,y,objSpringL){spring=-9}
    if !L &amp;&amp; !R &amp;&amp; room!=rFE3 &amp;&amp; room!=rLittle_Heart{
        hspeed=spring
    }

}
if frozen{
    xScale=1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///LineKid functionality

if (global.lineKid)
{   
    image_angle = global.playerAngle;

    if ((scrButtonCheck(global.alignLeftButton) || scrButtonCheck(global.upButton)) || (scrButtonCheck(global.alignRightButton) || scrButtonCheck(global.downButton)))
    {
        if (scrButtonCheck(global.alignLeftButton) || scrButtonCheck(global.upButton))
        {
            if (((global.playerAngle &gt;= 0) &amp;&amp; (global.playerAngle &lt; 90)) || ((global.playerAngle &gt;= 180) &amp;&amp; (global.playerAngle &lt; 270)))
            {
                if (place_free((x - 2), y) || place_free((x + 2), y))
                {
                    global.playerAngle += 3;
                    
                    if ((global.playerAngle &gt; 360) || (global.playerAngle &lt; 0))
                    {
                        global.playerAngle = ((global.playerAngle + 360) % 360);
                    }
                }
            }
            else if (place_free(x, (y - 2)) || place_free(x, (y + 2)))
            {
                global.playerAngle += 3;
                
                if ((global.playerAngle &gt; 360) || (global.playerAngle &lt; 0))
                {
                    global.playerAngle = ((global.playerAngle + 360) % 360);
                }
            }
        }
        if (scrButtonCheck(global.alignRightButton) || scrButtonCheck(global.downButton))
        {
            if (((global.playerAngle &gt; 0) &amp;&amp; (global.playerAngle &lt;= 90)) || ((global.playerAngle &gt; 180) &amp;&amp; (global.playerAngle &lt;= 270)))
            {
                if (place_free(x, (y - 2)) || place_free(x, (y + 2)))
                {
                    global.playerAngle -= 3;
                    
                    if ((global.playerAngle &gt; 360) || (global.playerAngle &lt; 0))
                    {
                        global.playerAngle = ((global.playerAngle + 360) % 360);
                    }
                }
            }
            else if (place_free((x - 2), y) || place_free((x + 2), y))
            {
                global.playerAngle -= 3;
                if ((global.playerAngle &gt; 360) || (global.playerAngle &lt; 0))
                {
                    global.playerAngle = ((global.playerAngle + 360) % 360);
                }
            }
        }
    }
    
    if (!notOnBlock)
    {
        if place_free(x, y)
        {
            testDist = 0;
            
            while (place_free(x, ((y + testDist) + 0.05)) &amp;&amp; (testDist &lt; 2))
                testDist += 0.05;
                
            if (testDist &lt; 2) { y += testDist; }
        }
    }
    
    firstMove = 0;
    lastMoveLast = 0;
    xBack = x; yBack = y;
    
    blah = 0;
    if (true)//while ((!place_free(x, y)) || place_meeting(x, y, objBlock))
    {
        lastMove = 0;
        lineCollisionBlock = scrInstancePlaceList(x, y, objBlock);
        if (lineCollisionBlock != -4)
        {
            num = ds_list_size(lineCollisionBlock)
            for (i = 0; i &lt; num; i++)
            {
                if (ds_list_find_value(lineCollisionBlock, i)).solid
                {
                    testDistXpos = 0;
                    testDistYpos = 0;
                    testDistXneg = 0;
                    testDistYneg = 0;
                    
                    if (blah)
                    {
                        if (firstMove == 1) { testDistXpos = 99; }
                        else if (firstMove == 2) { testDistXneg = 99; }
                        else if (firstMove == 3) { testDistYpos = 99; }
                        else if (firstMove == 4) { testDistYneg = 99; }
                    }
                    
                    if (lastMove == 1) { testDistXneg = 99; }
                    else if (lastMove == 2) { testDistXpos = 99; }
                    else if (lastMove == 3) { testDistYneg = 99; }
                    else if (lastMove == 4) { testDistYpos = 99; }
                    
                    while (place_meeting((x + testDistXpos), y, ds_list_find_value(lineCollisionBlock, i)) &amp;&amp; (testDistXpos &lt; 3))
                        testDistXpos += 0.2;
                        
                    while (place_meeting((x - testDistXneg), y, ds_list_find_value(lineCollisionBlock, i)) &amp;&amp; (testDistXneg &lt; 3))
                        testDistXneg += 0.2;
                        
                    while (place_meeting(x, (y + testDistYpos), ds_list_find_value(lineCollisionBlock, i)) &amp;&amp; (testDistYpos &lt; 3))
                        testDistYpos += 0.2;
                        
                    while (place_meeting(x, (y - testDistYneg), ds_list_find_value(lineCollisionBlock, i)) &amp;&amp; (testDistYneg &lt; 3))
                        testDistYneg += 0.2;
                        
                    move = min(testDistXpos, testDistXneg, testDistYpos, testDistYneg);
                    
                    if (move &lt; 3)
                    {
                        if (move == testDistXpos)
                        {
                            x += testDistXpos; xprevious = x;
                            
                            if (firstMove == 0) { firstMove = 1; }
                            lastMoveLast = lastMove; lastMove = 1;
                        }
                        else if (move == testDistXneg)
                        {
                            x -= testDistXneg; xprevious = x;
                            
                            if (firstMove == 0) { firstMove = 2; }
                            lastMoveLast = lastMove; lastMove = 2;
                        }
                        else if (move == testDistYpos)
                        {
                            y += testDistYpos; yprevious = y;
                            
                            if (firstMove == 0) { firstMove = 3; }
                            lastMoveLast = lastMove; lastMove = 3;
                        }
                        else if (move == testDistYneg)
                        {
                            y -= testDistYneg; yprevious = y;
                            
                            if (firstMove == 0) { firstMove = 4; }
                            lastMoveLast = lastMove; lastMove = 4;
                        }
                    }
                    else
                    {
                        x = xBack; y = yBack;
                        yprevious = yBack; xprevious = xBack;
                        lastMove = lastMoveLast;
                    }
                }
            }
            if (!place_free(x, y))
            {
                testDistXpos = 0;
                testDistYpos = 0;
                testDistXneg = 0;
                testDistYneg = 0;
                
                while ((!place_free((x + testDistXpos), y)) &amp;&amp; (testDistXpos &lt; 3))
                    testDistXpos += 0.2;
                    
                while ((!place_free((x - testDistXneg), y)) &amp;&amp; (testDistXneg &lt; 3))
                    testDistXneg += 0.2;
                    
                while ((!place_free(x, (y + testDistYpos))) &amp;&amp; (testDistYpos &lt; 3))
                    testDistYpos += 0.2;
                    
                while ((!place_free(x, (y - testDistYneg))) &amp;&amp; (testDistYneg &lt; 3))
                    testDistYneg += 0.2;
                    
                move = min(testDistXpos, testDistXneg, testDistYpos, testDistYneg);
                
                if (move == testDistXpos)
                {
                    x += testDistXpos; xprevious = x;
                    
                    if (firstMove == 0) { firstMove = 1; }
                    lastMoveLast = lastMove; lastMove = 1;
                }
                else if (move == testDistXneg)
                {
                    x -= testDistXneg; xprevious = x;
                    
                    if (firstMove == 0) { firstMove = 2; }
                    lastMoveLast = lastMove; lastMove = 2;
                }
                else if (move == testDistYpos)
                {
                    y += testDistYpos; yprevious = y;
                    
                    if (firstMove == 0) { firstMove = 3; }
                    lastMoveLast = lastMove; lastMove = 3;
                }
                else if (move == testDistYneg)
                {
                    y -= testDistYneg; yprevious = y;
                    
                    if (firstMove == 0) { firstMove = 4; }
                    lastMoveLast = lastMove; lastMove = 4;
                }
            }
        }
        blah = 1;
    }
}
else
{
    if (!global.lunarKid)
    {
        if (image_angle != 0) { image_angle = 0; }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///LunarKid functionality

if (global.lunarKid)
{
    if (!frozen) //Lunar Lander, aka "Rocket"
    {
        L = scrButtonCheck(global.leftButton)
        R = scrButtonCheck(global.rightButton)
        U = scrButtonCheck(global.upButton)
        D = scrButtonCheck(global.downButton)
        
        if scrButtonCheckPressed(global.shootButton) { scrPlayerShoot(); }
    
        if (global.debugNoDeath)
        {
            if (bow &amp;&amp; !instance_exists(objBow)) 
            { 
                ll = instance_create(x, y, objBow); 
                ll.sprite_index = sprLander;
            }
            else if (!bow &amp;&amp; instance_exists(objBow)) { instance_destroy(objBow); }
        }
        else if (start)
        { 
            if (instance_exists(objBow)) { instance_destroy(objBow); } 
        }
    
        if ((gravity == 0) &amp;&amp; (L || (R || (U || D))))
        {
            start = true;
            gravity = 0.008;
        }
    
        if (U) { motion_add((image_angle + 90), 0.013); }
        if (L) { image_angle += 1; }
        else if (R) { image_angle -= 1; }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objMovingPlatformNoBounce">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if scrButtonCheckPressed(global.jumpButton){
    scrPlayerJump()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlatform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.lunarKid)// &amp;&amp; (!((other.object_index == objMovingPlatform) &amp;&amp; (!other.snap))))
{
    if (!global.dotKid &amp;&amp; !global.lineKid)
    {
        if (!global.Xgrav)
        {
            if (sign(global.grav) == 1)
            {
                if ((y - (vspeed / 2)) &lt;= (other.y + 0.49))
                {
                    if (other.vspeed &gt;= 0)
                    {
                        y = (other.y - 9);
                        vspeed = other.vspeed;
                    }
                    if (other.object_index != objDisappearPlatform)
                    {
                        onPlatform = true;
                        djump = 1;
                    }
                }
            }
            else if ((y - (vspeed / 2)) &gt;= ((other.y + other.sprite_height) - 1.49))
            {
                if (other.yspeed &lt;= 0)
                {
                    y = ((other.y + other.sprite_height) + 8);
                    vspeed = other.yspeed;
                }
                if (other.object_index != objDisappearPlatform)
                {
                    onPlatform = true;
                    djump = 1;
                }
            }
        }
        else
        {
            if (sign(global.grav) == 1)
            {
                if ((x - (hspeed / 2)) &lt;= (other.x + 0.49))
                {
                    if (other.hspeed &gt;= 0)
                    {
                        x = (other.x - 9);
                        hspeed = other.hspeed;
                    }
                    if (other.object_index != objDisappearPlatform)
                    {
                        onPlatform = true;
                        djump = 1;
                    }
                }
            }
            else if ((x - (hspeed / 2)) &gt;= ((other.x + other.sprite_width) - 1.49))
            {
                if (other.xspeed &lt;= 0)
                {
                    x = ((other.x + other.sprite_width) + 8);
                    hspeed = other.xspeed;
                }
                if (other.object_index != objDisappearPlatform)
                {
                    onPlatform = true;
                    djump = 1;
                }
            }
        }
    }
    else if (global.dotKid)
    {
        if (!global.Xgrav)
        {
            if (sign(global.grav) == 1)
            {
                if ((y - (vspeed)) &lt;= (other.y + 0.49))
                {
                    if (other.vspeed &gt;= 0)
                    {
                        y = (other.y - 1); 
                        vspeed = other.vspeed;
                    }
                    if (other.object_index != objDisappearPlatform)
                    {
                        onPlatform = true;
                        djump = 1;
                    }
                }
            }
            else if ((y - (vspeed)) &gt;= ((other.y + other.sprite_height - 0.51)))
            {
                if (other.yspeed &lt;= 0)
                {
                    y = (other.y + other.sprite_height + 1);
                    vspeed = other.yspeed;
                }
                if (other.object_index != objDisappearPlatform)
                {
                    onPlatform = true;
                    djump = 1;
                }
            }
        }
        else
        {
            if (sign(global.grav) == 1)
            {
                if ((x - (hspeed)) &lt;= (other.x + 0.49))
                {
                    if (other.hspeed &gt;= 0)
                    {
                        x = (other.x - 1);
                        hspeed = other.hspeed;
                    }
                    if (other.object_index != objDisappearPlatform)
                    {
                        onPlatform = true;
                        djump = 1;
                    }
                }
            }
            else if ((x - (hspeed)) &gt;= ((other.x + other.sprite_width) - 0.51))
            {
                if (other.xspeed &lt;= 0)
                {
                    x = (other.x + other.sprite_width + 1);
                    hspeed = other.xspeed;
                }
                if (other.object_index != objDisappearPlatform)
                {
                    onPlatform = true;
                    djump = 1;
                }
            }
        }
    }
    else if (global.lineKid)
    {
        if (!global.Xgrav)
        {
            if (sign(global.grav) == 1)
            {
                if ((y - (vspeed)) &lt;= (other.y + 0.49))
                {
                    if (other.vspeed &gt;= 0)
                    {
                        y = (other.y - 1); 
                        vspeed = other.vspeed;
                    }
                    if (other.object_index != objDisappearPlatform)
                    {
                        onPlatform = true;
                        djump = 1;
                    }
                }
            }
            else if ((y - (vspeed)) &gt;= ((other.y + other.sprite_height - 0.51)))
            {
                if (other.yspeed &lt;= 0)
                {
                    y = (other.y + other.sprite_height + 1);
                    vspeed = other.yspeed;
                }
                if (other.object_index != objDisappearPlatform)
                {
                    onPlatform = true;
                    djump = 1;
                }
            }
        }
        else
        {
            if (sign(global.grav) == 1)
            {
                if ((x - (hspeed)) &lt;= (other.x + 0.49))
                {
                    if (other.hspeed &gt;= 0)
                    {
                        x = (other.x - 1);
                        hspeed = other.hspeed;
                    }
                    if (other.object_index != objDisappearPlatform)
                    {
                        onPlatform = true;
                        djump = 1;
                    }
                }
            }
            else if ((x - (hspeed)) &gt;= ((other.x + other.sprite_width) - 0.51))
            {
                if (other.xspeed &lt;= 0)
                {
                    x = (other.x + other.sprite_width + 1);
                    hspeed = other.xspeed;
                }
                if (other.object_index != objDisappearPlatform)
                {
                    onPlatform = true;
                    djump = 1;
                }
            }
        }
    }
}

/*if (!global.lunarKid)
{
    if (global.grav == 1)   //normal
    {
        if (y-vspeed/2 &lt;= other.y)
        {
            if (other.vspeed &gt;= 0)
            {
                y = other.y-9;
                vspeed = other.vspeed;
            }
            
            onPlatform = true;
            djump = 1;
        }
    }
    else    //flipped
    {
        if (y-vspeed/2 &gt;= other.y+other.sprite_height-1)
        {
            if (other.yspeed &lt;= 0)
            {
                y = other.y+other.sprite_height+8;
                vspeed = other.yspeed;
            }
            
            onPlatform = true;
            djump = 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBlock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xTest, yTest, yTemp, xTemp;
if room=rSomeday{
    if(other.solid){
        if true{
            collisionList = scrInstancePlaceList(x, y, objBlock)
            if(collisionList != noone){
                num = ds_list_size(collisionList)
                for(i = 0; i &lt; num; i++){
                    if(ds_list_find_value(collisionList, i).solid){
                        testDistXpos = 0
                        testDistYpos = 0
                        testDistXneg = 0
                        testDistYneg = 0
                        
                        while(place_meeting(x+testDistXpos, y, ds_list_find_value(collisionList, i)) &amp;&amp; testDistXpos &lt; 2){
                            testDistXpos += .01  
                        }
                        while(place_meeting(x-testDistXneg, y, ds_list_find_value(collisionList, i)) &amp;&amp; testDistXneg &lt; 2){
                            testDistXneg += .01  
                        }
                        while(place_meeting(x, y+testDistYpos, ds_list_find_value(collisionList, i)) &amp;&amp; testDistYpos &lt; 2){
                            testDistYpos += .01  
                        }
                        while(place_meeting(x, y-testDistYneg, ds_list_find_value(collisionList, i)) &amp;&amp; testDistYneg &lt; 2){
                            testDistYneg += .01  
                        }
                    
                        move = min(testDistXpos, testDistXneg, testDistYpos, testDistYneg)
                        
                        if(move == testDistXpos){
                            x += testDistXpos    
                        }
                        else if(move == testDistXneg){
                            x -= testDistXneg
                        }
                        else if(move == testDistYpos){
                            y += testDistYpos
                        }
                        else if(move == testDistYneg){
                            y -= testDistYneg
                        }
                    }
                }
            }
            
            if(!notOnBlock){
                testDist = 0
                while(!place_meeting(x,y+testDist+.01, objBlock) &amp;&amp; testDist &lt; 2){
                    testDist += .01
                }
                if(testDist &lt; 2){
                    y += testDist
                }
            }
        }
    }
}
if (!global.lunarKid)
{    
    if (other.solid)
    {
        if (place_meeting((x + hspeed), y, objBlock) &amp;&amp; (!place_free((x + hspeed), y)))
        {
            if (sign(global.grav) == 1)
            {
                if (hspeed &lt;= 0) { move_contact_solid(180, abs(hspeed)); }
                if (hspeed &gt; 0)
                {
                    move_contact_solid(0, abs(hspeed));
                    if (global.Xgrav) { djump = 1; }
                }
            }
            else
            {
                if (hspeed &lt; 0)
                {
                    move_contact_solid(180, abs(hspeed));
                    if (global.Xgrav) { djump = 1; }
                }
                if (hspeed &gt;= 0) { move_contact_solid(0, abs(hspeed)); }
            }
            hspeed = 0;
        }
        if ((!global.lineKid) || (!(place_free((x + 0.6), (y + vspeed)) || place_free((x - 0.6), (y + vspeed)))))
        {
            if (place_meeting(x, (y + vspeed), objBlock) &amp;&amp; (!place_free(x, (y + vspeed))))
            {
                if (sign(global.grav) == 1)
                {
                    if (vspeed &lt;= 0) { move_contact_solid(90, abs(vspeed)); }
                    
                    if (vspeed &gt; 0)
                    {
                        move_contact_solid(270, abs(vspeed))
                        if (!global.Xgrav) { djump = 1; }
                    }
                }
                else
                {
                    if (vspeed &lt;= 0)
                    {
                        move_contact_solid(90, abs(vspeed))
                        if (!global.Xgrav) { djump = 1; }
                    }
                    if (vspeed &gt; 0) { move_contact_solid(270, abs(vspeed)); }
                }
                vspeed = 0;
            }
        }
        else if (global.lineKid &amp;&amp; notOnBlock)
        {
            if place_free((x + 0.6), (y + vspeed)) { x += 0.6; }
            else { x -= 0.6; }
        }
        if (place_meeting((x + hspeed), (y + vspeed), objBlock) &amp;&amp; (!place_free((x + hspeed), (y + vspeed))))
        {
            xTest = x; yTest = y;
            
            while(1)
            {
                xTest += (hspeed / 10);
                
                if place_meeting(xTest, yTest, objBlock)
                {
                    yTemp = y; y = yTest;
                    
                    if (sign(global.grav) == 1)
                    {
                        if (hspeed &lt;= 0)  { move_contact_solid(180, abs(hspeed)); }
                        if (hspeed &gt; 0)
                        {
                            move_contact_solid(0, abs(hspeed));
                            if (global.Xgrav) { djump = 1; }
                        }
                    }
                    else
                    {
                        if (hspeed &lt; 0)
                        {
                            move_contact_solid(180, abs(hspeed))
                            if (global.Xgrav) { djump = 1; }
                        }
                        if (hspeed &gt;= 0) { move_contact_solid(0, abs(hspeed)); }
                    }
                    hspeed = 0; y = yTemp;
                    break;
                }
                else
                {
                    yTest += (vspeed / 10);
                    
                    if place_meeting(xTest, yTest, objBlock)
                    {
                        xTemp = x; x = xTest;
                        
                        if (sign(global.grav) == 1)
                        {
                            if (vspeed &lt;= 0) { move_contact_solid(90, abs(vspeed)); }
                            if (vspeed &gt; 0)
                            {
                                move_contact_solid(270, abs(vspeed));
                                if (!global.Xgrav) { djump = 1; }
                            }
                        }
                        else
                        {
                            if (vspeed &lt;= 0)
                            {
                                move_contact_solid(90, abs(vspeed));
                                if (!global.Xgrav) { djump = 1; }
                            }
                            if (vspeed &gt; 0) { move_contact_solid(270, abs(vspeed)); }
                        }
                        vspeed = 0; x = xTemp;
                        break;
                    }
                    else
                    {
                        continue
                    }
                }
            }
        }
    }
}
else 
{ 
    if (!global.debugNoDeath) { scrKillPlayer(); }
    else { scrGodPlayer(); }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize the secondary player variables
if (global.lineKid) { image_angle = global.savePlayerAngle; }

if (global.lunarKid)
{
    sl = instance_create(x, y, objBow);
    sl.sprite_index = sprLander; 
    gravity = 0; friction = 0.0005;
}
else
{
    jump = (8.5 * sign(global.grav)); //set how fast the player jumps
    jump2 = (7 * sign(global.grav)); //sets how fast the player double jumps
    gravity = (0.4 * global.grav); //player gravity
    friction = 0; //player friction
    
    if (global.slippage != 0) { maxSpeed = 3.06; }
    else { maxSpeed = 3; } //max horizontal speed
    
    if (global.Xgrav) { gravity_direction = 0; } //sets the player's horizontal gravity direction
    maxVspeed = (9 * (abs(global.grav) + ((1 - abs(global.grav)) / 2))); //max vertical speed
}

scrGetPlayerSprite();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the player
var drawX, drawY;

drawX = x;
drawY = y;
if room=rSomeday{
    drawY=y-(9*image_yscale)
}

if (sign(global.grav) == -1)
{
    if (!global.Xgrav) { drawY += 1; } //need to draw the player a pixel off in the y-axis when flipped for some reason
    else { drawX += 1; }
}

if ((!global.dotKid) &amp;&amp; (!global.lineKid) &amp;&amp; (!global.lunarKid))
{   
    if (!global.Xgrav)
    {
        draw_sprite_ext(sprite_index, image_index, drawX, drawY, (image_xscale * xScale), (image_yscale * sign(global.grav)), image_angle, image_blend, image_alpha);
        if (global.debugShowHitbox) { draw_sprite_ext(mask_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, (image_alpha * 0.8)); }
    }
    else
    {
        draw_sprite_ext(sprite_index, image_index, drawX, drawY, (image_xscale * xScale), (image_yscale * sign(global.grav)), 90, image_blend, image_alpha);
        if (global.debugShowHitbox) { draw_sprite_ext(mask_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, (image_alpha * 0.8)); }
    }
}
else
{
    draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
    if (global.debugShowHitbox) { draw_sprite_ext(mask_index, image_index, x, y, image_xscale, image_yscale, image_angle, make_color_rgb(255, 0, 255), (image_alpha * 0.8)); }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
