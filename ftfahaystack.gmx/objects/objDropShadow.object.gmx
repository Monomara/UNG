<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surf = surface_create(view_wview[0]*2,view_hview[0]*2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(surface_exists(surf))
    surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//begin nightmare code from hell
with objBlock{
  if object_index == objBlock{//this part is because the normal block sprite is transparent
    draw_sprite_ext(sprWhite,0,x+3-view_xview[0]+(.5*view_wview[0]),y+3-view_yview[0]+(.5*view_hview[0]),image_xscale,image_yscale,0,c_black,1);
  }else{//platforms and any fully visible block types
    draw_sprite_ext(sprite_index,image_index,x+3-view_xview[0]+(.5*view_wview[0]),y+3-view_yview[0]+(.5*view_hview[0]),image_xscale,image_yscale,image_angle,c_black,image_alpha*1);
  }
}
with objPlayer{
  draw_sprite_ext(sprite_index,image_index,x+3-view_xview[0]+(.5*view_wview[0]),y+3-view_yview[0]+(.5*view_hview[0]),objPlayer.xScale,global.grav,image_angle,c_black,image_alpha*1);
}
with objSave{
  draw_sprite_ext(sprite_index,image_index,x+3-view_xview[0]+(.5*view_wview[0]),y+3-view_yview[0]+(.5*view_hview[0]),image_xscale,image_yscale,image_angle,c_black,image_alpha*1);
}
with objPlayerKiller{
  draw_sprite_ext(sprite_index,image_index,x+3-view_xview[0]+(.5*view_wview[0]),y+3-view_yview[0]+(.5*view_hview[0]),image_xscale,image_yscale,image_angle,c_black,image_alpha*1);
}
with objBullet{
  draw_sprite_ext(sprite_index,image_index,x+3-view_xview[0]+(.5*view_wview[0]),y+3-view_yview[0]+(.5*view_hview[0]),image_xscale,image_yscale,image_angle,c_black,image_alpha*1);
}
with objMovingPlatform{
  draw_sprite_ext(sprite_index,image_index,x+3-view_xview[0]+(.5*view_wview[0]),y+3-view_yview[0]+(.5*view_hview[0]),image_xscale,image_yscale,image_angle,c_black,image_alpha*1);
}
with objTriggerButton{
  draw_sprite_ext(sprite_index,image_index,x+3-view_xview[0]+(.5*view_wview[0]),y+3-view_yview[0]+(.5*view_hview[0]),image_xscale,image_yscale,image_angle,c_black,image_alpha*1);
}
with objKillTrigger{
  draw_sprite_ext(sprite_index,image_index,x+3-view_xview[0]+(.5*view_wview[0]),y+3-view_yview[0]+(.5*view_hview[0]),image_xscale,image_yscale,image_angle,c_black,image_alpha*1);
}
with objChildExercise{
  draw_sprite_ext(sprite_index,image_index,x+3-view_xview[0]+(.5*view_wview[0]),y+3-view_yview[0]+(.5*view_hview[0]),image_xscale,image_yscale,image_angle,c_black,image_alpha*1);
}
with objBlood{
  draw_sprite_ext(sprite_index,image_index,x+3-view_xview[0]+(.5*view_wview[0]),y+3-view_yview[0]+(.5*view_hview[0]),image_xscale,image_yscale,image_angle,c_black,image_alpha*1);
}
with objGameOver{
    if !global.gamePaused{
        draw_sprite_ext(sprite_index,image_index,403+(.5*view_wview[0]),307+(.5*view_hview[0]),image_xscale,image_yscale,image_angle,c_black,image_alpha*1);
    }
}
with objPlayerHit{
  draw_sprite_ext(sprite_index,image_index,x+3-view_xview[0]+(.5*view_wview[0]),y+3-view_yview[0]+(.5*view_hview[0]),image_xscale,image_yscale,image_angle,c_black,image_alpha*1);
}
with objFreeTrigger{
    if room=rLittle_Heart
     draw_sprite_ext(sprWhite,0,x+3-view_xview[0]+(.5*view_wview[0]),y+3-view_yview[0]+(.5*view_hview[0]),image_xscale,image_yscale,0,c_black,1);
}
with objRocketSpawner{
  draw_sprite_ext(sprite_index,image_index,x+3-view_xview[0]+(.5*view_wview[0]),y+3-view_yview[0]+(.5*view_hview[0]),image_xscale,image_yscale,image_angle,c_black,image_alpha*1);
}
with objEvilKid{
    if sprite_index!=sprCherryEvil{
        draw_sprite_ext(sprite_index,image_index,x+3-view_xview[0]+(.5*view_wview[0]),y+3-view_yview[0]+(.5*view_hview[0]),image_xscale,image_yscale,image_angle,c_black,image_alpha*1);
    }
}

with objAutomaticPlatform{
  draw_sprite_ext(sprite_index,image_index,x+3-view_xview[0]+(.5*view_wview[0]),y+3-view_yview[0]+(.5*view_hview[0]),image_xscale,image_yscale,image_angle,c_black,image_alpha*1);
}
with objCasioWarp{
  draw_sprite_ext(sprite_index,image_index,x+3-view_xview[0]+(.5*view_wview[0]),y+3-view_yview[0]+(.5*view_hview[0]),image_xscale,image_yscale,image_angle,c_black,image_alpha*1);
}
with objSpringR{
  draw_sprite_ext(sprite_index,image_index,x+3-view_xview[0]+(.5*view_wview[0]),y+3-view_yview[0]+(.5*view_hview[0]),image_xscale,image_yscale,image_angle,c_black,image_alpha*1);
}
with objSpringL{
  draw_sprite_ext(sprite_index,image_index,x+3-view_xview[0]+(.5*view_wview[0]),y+3-view_yview[0]+(.5*view_hview[0]),image_xscale,image_yscale,image_angle,c_black,image_alpha*1);
}
with objGravityDown{
  draw_sprite_ext(sprite_index,image_index,x+3-view_xview[0]+(.5*view_wview[0]),y+3-view_yview[0]+(.5*view_hview[0]),image_xscale,image_yscale,image_angle,c_black,image_alpha*1);
}
with objGravityUp{
  draw_sprite_ext(sprite_index,image_index,x+3-view_xview[0]+(.5*view_wview[0]),y+3-view_yview[0]+(.5*view_hview[0]),image_xscale,image_yscale,image_angle,c_black,image_alpha*1);
}
with objGravityRight{
  draw_sprite_ext(sprite_index,image_index,x+3-view_xview[0]+(.5*view_wview[0]),y+3-view_yview[0]+(.5*view_hview[0]),image_xscale,image_yscale,image_angle,c_black,image_alpha*1);
}
with objGravityLeft{
  draw_sprite_ext(sprite_index,image_index,x+3-view_xview[0]+(.5*view_wview[0]),y+3-view_yview[0]+(.5*view_hview[0]),image_xscale,image_yscale,image_angle,c_black,image_alpha*1);
}
with objBoss{
  draw_sprite_ext(sprite_index,image_index,x+3-view_xview[0]+(.5*view_wview[0]),y+3-view_yview[0]+(.5*view_hview[0]),image_xscale,image_yscale,image_angle,c_black,image_alpha*1);
}
with objToggleCherry{
    if sprite_index!=sprCherryEvil{
        draw_sprite_ext(sprite_index,image_index,x+3-view_xview[0]+(.5*view_wview[0]),y+3-view_yview[0]+(.5*view_hview[0]),image_xscale,image_yscale,image_angle,c_black,image_alpha*1);
    }
}
//end nightmare code from hell
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//Create surface if it doesn't exist
if(!surface_exists(surf)) {
    surf = surface_create(view_wview[0]*2,view_hview[0]*2);
}

//Clear the surface, then draw shadow sprites onto surface (at full opacity)
surface_set_target(surf);
draw_clear_alpha(c_black, 0);

event_user(0);


surface_reset_target();

//Draw the surface
draw_surface_ext(surf,view_xview[0]-(.5*view_wview[0]),view_yview[0]-(.5*view_hview[0]),1,1,0,c_white,.35);


//x+3-view_xview[0]+(.5*view_wview[0]),y+3-view_yview[0]+(.5*view_hview[0])
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
